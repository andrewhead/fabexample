---
- name: Install server software
  apt: name={{ item }} update_cache=yes
  with_items:
  - git
  - python-pip
  - nginx
  - python-boto
  - python-dev
  - supervisor
  - memcached
  - sqlite3
  sudo: true
  tags: serverpkgs

- name: Install application dependencies
  apt: name={{ item }} update_cache=yes
  with_items: systempkgs
  sudo: true
  when: systempkgs is defined
  tags: systempkgs

- name: Install Docker
  shell: curl -sSL https://get.docker.com/ | sh
  sudo: true
  tags: dockerinstall

- name: Install Docker Python library
  pip: name=docker-py version=1.1.0
  sudo: true
  tags: dockerinstall

- name: Create project directory
  file: state=directory path={{ projectdir }} owner=ubuntu
  sudo: true
  tags: directories

- name: Create static directory
  file: state=directory path={{ scriptdir }} owner=ubuntu
  tags: directories

- name: Create static files directory
  file: state=directory path={{ staticdir }} owner=ubuntu
  tags: directories

- name: Create folder for uploadable libraries and content
  file: state=directory path=/var/www/{{ appname }} owner=ubuntu
  sudo: true
  tags: directories

- name: Create log file
  file: state=touch path={{ logfile }} owner=ubuntu
  sudo: true
  when: logfile is defined

- name: Create all other user directories
  file: state=directory path={{ item }} owner=ubuntu
  sudo: true
  with_items: user_directories
  when: user_directories is defined
  tags: directories

- name: Install virtualenv
  pip: name=virtualenv
  sudo: true

- name: Transfer Python dependencies list
  copy: src={{ appname }}-reqs.txt dest={{ projectdir }}
  tags: pythonpkgs

- name: Install server Python dependencies
  pip: requirements={{ projectdir }}/{{ appname }}-reqs.txt virtualenv="{{ venv }}"
  tags: pythonpkgs

- name: Checkout source code
  git: repo={{ repo }} dest={{ src }} force=yes recursive=yes
  tags: updatecode

- name: Make Java project dependencies directory
  file: state=directory path={{ src }}/deps owner=ubuntu

- name: Remove previous versions of project dependencies
  file: state=absent path={{ src }}/deps/{{ item }}
  with_items: external_deps
  when: external_deps is defined
  tags: dependencies

- name: Install dependencies for project
  s3: bucket={{ publicbucket }} object={{ publicdir }}/{{ item }} dest={{ src }}/deps/{{ item }} mode=get overwrite=false
  with_items: external_deps
  when: external_deps is defined
  tags: dependencies

- name: Install gunicorn
  pip: name=gunicorn virtualenv="{{ venv }}"

- name: Configure nginx main site
  template: src=nginx-site.j2 dest=/etc/nginx/sites-enabled/{{ appname }}
  sudo: true
  tags: nginx

- name: Add subdomains for localsites
  template: src=local-server.j2 dest=/etc/nginx/sites-enabled/{{ item.subdomain }}
  with_items: subdomains
  when: subdomains is defined
  sudo: true
  tags:
  - subdomains
  - nginx

- name: Remove default nginx user
  lineinfile: dest=/etc/nginx/nginx.conf line="user www-data;" state=absent
  sudo: true
  tags: nginx

- name: Add nginx user
  lineinfile: dest=/etc/nginx/nginx.conf line="user ubuntu ubuntu;"
  sudo: true
  tags: nginx

- name: Create directory for Django secret keys
  file: state=directory path=/etc/django
  sudo: true

- name: Fetch Django app secret key
  s3: bucket={{ privatebucket }} object={{ djkey }} dest=/etc/django/{{ djkey }} mode=get
  sudo: true

- name: Sync DB with Django models
  django_manage: >
    command={{ item }}
    app_path={{ djdir }}
    virtualenv={{ venv }}
    settings={{ djsettings }}
  with_items:
  - syncdb
  - migrate
  tags: updatecode

- name: Update static files
  django_manage: >
    command=collectstatic
    app_path={{ djdir }}
    virtualenv={{ venv }}
    settings={{ djsettings }}
  when: staticfiles is defined
  tags: updatecode

- name: Transfer bash setup scripts
  template: src={{ item }}.j2 dest={{ scriptdir }}/{{ item }}.sh
  with_items: scripts
  when: scripts is defined
  tags: scripts

- name: Run setup scripts
  command: /bin/bash {{ item }}.sh chdir={{ scriptdir }}
  with_items: scripts
  when: scripts is defined
  tags: scripts

- name: Transfer Python setup scripts
  copy: src={{ item }} dest={{ scriptdir }}
  with_items: python_scripts
  when: python_scripts is defined
  tags: scripts

- name: Run Python setup scripts
  command: "{{ venv }}/bin/python {{ scriptdir }}/{{ item }}"
  with_items: python_scripts
  when: python_scripts is defined
  tags: scripts

- name: Make sure memcached is running
  service: name=memcached state=started
  sudo: true
  tags: memcached

- name: Create Docker group
  group: name=docker state=present
  tags: containers

- name: Fetch and start Docker containers
  docker:
    image: "{{ item.image }}"
    state: running
    ports: "{{ item.host_port }}:{{ item.exposed_port }}"
  with_items: containers
  when: containers is defined
  sudo: true
  tags: containers

- name: Add auxiliary processes to supervisor
  template: src={{ item }}.j2 dest=/etc/supervisor/conf.d/{{ item }}.conf
  with_items: processes
  when: processes is defined
  sudo: true
  tags: processes

- name: Load auxiliary processes
  supervisorctl: name={{ item }} state=present
  with_items: processes
  when: processes is defined
  sudo: true
  tags: processes

- name: Restart auxiliary processes (stop)
  supervisorctl: name={{ item }} state=stopped
  with_items: processes
  when: processes is defined
  sudo: true
  tags: processes

- name: Restart auxiliary processes (start)
  supervisorctl: name={{ item }} state=started
  with_items: processes
  when: processes is defined
  sudo: true
  tags: processes

- name: Copy app to supervisor
  template: src=supervisor.j2 dest=/etc/supervisor/conf.d/{{ appname }}.conf
  sudo: true
  tags: processes

- name: Stop application
  supervisorctl: name={{ appname }} state={{ item }}
  with_items:
  - present
  - stopped
  sudo: true
  tags:
  - updatecode
  - processes

- name: Cleanup after last application run
  file: dest=/tmp/{{ appname }}.pid state=absent
  sudo: true
  tags:
  - updatecode
  - processes

- name: Start application
  supervisorctl: name={{ appname }} state=started
  sudo: true
  tags: 
  - updatecode
  - processes

- name: Restart nginx
  service: name=nginx state=restarted
  tags: 
  - subdomains
  - nginx
